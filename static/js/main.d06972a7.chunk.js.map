{"version":3,"sources":["components/action.js","components/fetchPosts.js","reducer/postsReducer.js","components/postPreview.js","components/home.js","constants/index.js","components/posts.js","components/pages.js","components/header.js","components/App.js","serviceWorker.js","index.js"],"names":["FETCH_POSTS_PENDING","FETCH_POSTS_SUCCESS","FETCH_POSTS_ERROR","FETCH_PAGES_SUCCESS","FETCH_CATEGORIES_SUCCESS","fetchPostsPending","type","fetchPostsError","error","fetchPosts","url","dispatch","fetch","then","res","json","posts","catch","fetchPages","pages","fetchCategories","categories","initialState","pending","getPosts","state","getPages","getCategories","getPostsPending","getPostsError","PostPreview","index","data","func","str","temp","content","rendered","slice","toString","replace","id","className","dangerouslySetInnerHTML","__html","title","Home","map","key","to","appUrl","PostPage","this","props","match","params","postsId","React","Component","connect","bindActionCreators","fetchPostsAction","CodeOfConduct","Body","shouldComponentRender","bind","Constants","console","log","DropdownButton","Dropdown","Item","href","name","placeholder","path","component","exact","render","fetchPagesAction","fetchCategoriesAction","App","Boolean","window","location","hostname","middlewares","thunk","store","createStore","action","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d06972a7.chunk.js","sourcesContent":["export const FETCH_POSTS_PENDING = 'FETCH_POSTS_PENDING';\r\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\r\nexport const FETCH_POSTS_ERROR = 'FETCH_POSTS_ERROR';\r\nexport const FETCH_PAGES_SUCCESS = 'FETCH_PSGES_SUCCESS';\r\nexport const FETCH_CATEGORIES_SUCCESS = 'FETCH_CATEGORIES_SUCCESS';\r\n\r\nexport function fetchPostsPending() {\r\n  return {\r\n    type: FETCH_POSTS_PENDING\r\n  }\r\n}\r\n\r\nexport function fetchPostsSuccess(posts) {\r\n  return {\r\n    type: FETCH_POSTS_SUCCESS,\r\n    posts: posts\r\n  }\r\n}\r\n\r\nexport function fetchPagesSuccess(pages) {\r\n  return {\r\n    type: FETCH_PAGES_SUCCESS,\r\n    pages: pages\r\n  }\r\n}\r\n\r\nexport function fetchCategoriesSuccess(categories) {\r\n  return {\r\n    type: FETCH_CATEGORIES_SUCCESS,\r\n    categories:  categories\r\n  }\r\n}\r\n\r\nexport function fetchPostsError(error) {\r\n  return {\r\n    type: FETCH_POSTS_ERROR,\r\n    error: error\r\n  }\r\n}","import { fetchPostsPending, fetchPostsSuccess, fetchCategoriesSuccess, fetchPagesSuccess, fetchPostsError } from './action.js';\r\n\r\nexport function fetchPosts(url) {\r\n  return dispatch => {\r\n    dispatch(fetchPostsPending());\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (res.error) {\r\n          throw (res.error);\r\n        }\r\n        dispatch(fetchPostsSuccess(res));\r\n        return res;\r\n      })\r\n      .catch(error => {\r\n        dispatch(fetchPostsError(error));\r\n      })\r\n  }\r\n}\r\n\r\nexport function fetchPages(url) {\r\n  return dispatch => {\r\n    dispatch(fetchPostsPending());\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (res.error) {\r\n          throw (res.error);\r\n        }\r\n        dispatch(fetchPagesSuccess(res));\r\n        return res;\r\n      })\r\n      .catch(error => {\r\n        dispatch(fetchPostsError(error));\r\n      })\r\n  }\r\n}\r\n\r\nexport function fetchCategories(url) {\r\n  return dispatch => {\r\n    dispatch(fetchPostsPending());\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (res.error) {\r\n          throw (res.error);\r\n        }\r\n        dispatch(fetchCategoriesSuccess(res));\r\n        return res;\r\n      })\r\n      .catch(error => {\r\n        dispatch(fetchPostsError(error));\r\n      })\r\n  }\r\n}","import { FETCH_POSTS_PENDING, FETCH_POSTS_SUCCESS, FETCH_CATEGORIES_SUCCESS, FETCH_PAGES_SUCCESS, FETCH_POSTS_ERROR } from '../components/action.js';\r\n\r\nexport const initialState = {\r\n  pending: true,\r\n  posts: [],\r\n  pages: [],\r\n  error: null\r\n}\r\n\r\nexport function postsReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_POSTS_PENDING:\r\n      return {\r\n        ...state,\r\n        pending: true\r\n      }\r\n    case FETCH_POSTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        posts: action.posts\r\n      }\r\n    case FETCH_PAGES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        pages: action.pages\r\n      }\r\n    case FETCH_CATEGORIES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        categories: action.categories\r\n      }\r\n    case FETCH_POSTS_ERROR:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        error: action.error\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getPosts = state => state.posts;\r\nexport const getPages = state => state.pages;\r\nexport const getCategories = state => state.categories;\r\nexport const getPostsPending = state => state.pending;\r\nexport const getPostsError = state => state.error;\r\n","import React from 'react';\r\n\r\nfunction PostPreview({ index, data, func }) {\r\n\r\n  function strip_html_tags(str) {\r\n    if ((str === null) || (str === ''))\r\n      return false;\r\n    else\r\n      str = str.toString();\r\n    return str.replace(/<[^>]*>/g, '');\r\n  }\r\n\r\n  var temp = strip_html_tags(data[index].content.rendered.slice(0, 199));\r\n  temp = [...temp, \".... read more\"];\r\n\r\n  return (\r\n    <div id={\"container\" + index} className=\"container col-sm-5\">\r\n      <div id=\"title-container\">\r\n        <h5 id=\"title-of-post\" dangerouslySetInnerHTML={{ __html: data[index].title.rendered }}></h5>\r\n      </div>\r\n      <hr />\r\n      <p>{temp}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostPreview;","import React from 'react';\r\nimport PostPreview from './postPreview.js';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = ({ posts }) => {\r\n  return (\r\n    <div id=\"content\">\r\n      <h4>Recent Posts</h4>\r\n\r\n      {posts.map((data, index) => (\r\n        <Link key={index} to={`/posts=${index}`}><PostPreview index={index} data={posts} /></Link>\r\n      ))}\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Home;","export const appUrl = \"https://wpbakery.com/wp-json/wp/v2/\";\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts as fetchPostsAction } from './fetchPosts.js';\r\nimport { getPostsError, getPosts, getPostsPending } from '../reducer/postsReducer.js';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nclass PostPage extends React.Component {\r\n\r\n  render() {\r\n    const { posts } = this.props;\r\n    var index = this.props.match.params.postsId;\r\n    return (\r\n      <div id=\"content\">\r\n        <h2 dangerouslySetInnerHTML={{ __html: posts[index].title.rendered }}></h2>\r\n        <div dangerouslySetInnerHTML={{ __html: posts[index].content.rendered }}></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  error: getPostsError(state),\r\n  posts: getPosts(state),\r\n  pending: getPostsPending(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n  fetchPosts: fetchPostsAction\r\n}, dispatch)\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PostPage);\r\n","import React from 'react';\r\n\r\nconst CodeOfConduct = ({ pages }) => {\r\n  return (\r\n    <div id=\"content\">\r\n      <h2 dangerouslySetInnerHTML={{ __html: pages.title.rendered }}></h2>\r\n      <div dangerouslySetInnerHTML={{ __html: pages.content.rendered }}></div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default CodeOfConduct;","import React from 'react';\r\nimport '../App.css';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts as fetchPostsAction, fetchPages as fetchPagesAction, fetchCategories as fetchCategoriesAction } from './fetchPosts.js';\r\nimport { getPostsError, getPosts, getPages, getCategories, getPostsPending } from '../reducer/postsReducer.js';\r\nimport { bindActionCreators } from 'redux';\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport Home from './home';\r\nimport * as Constants from '../constants/index'\r\nimport PostPage from './posts';\r\nimport Pages from './pages';\r\n\r\nclass Body extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.shouldComponentRender = this.shouldComponentRender.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    const { fetchPosts, fetchPages, fetchCategories } = this.props;\r\n    const getPosts = `${Constants.appUrl}posts`;\r\n    const getPages = `${Constants.appUrl}pages`;\r\n    const getCategories = `${Constants.appUrl}categories`;\r\n    \r\n    fetchPosts(getPosts);\r\n    fetchPages(getPages);\r\n    fetchCategories(getCategories);\r\n  }\r\n\r\n  shouldComponentRender() {\r\n    const { pending } = this.props;\r\n    if (pending === false) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    const { posts, pages, categories } = this.props;\r\n    console.log(categories);\r\n    if (this.shouldComponentRender()) {\r\n      return (<div></div>);\r\n    }\r\n\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <div id=\"header\">\r\n            <div>\r\n              <h1>My Blog</h1>\r\n            </div>\r\n            <div id=\"navbar-element\">\r\n              <Link className=\"col-sm-2 navbar-elements\" to={\"/\"}><label>Home</label></Link>\r\n              <Link className=\"col-sm-2 navbar-elements\" to={\"/termsOfService\"}><label>Terms Of Services</label></Link>\r\n              <Link className=\"col-sm-2 navbar-elements\" to={\"/codeOfConduct\"}><label>Code Of Conduct</label></Link>\r\n\r\n              <div className=\"col-sm-2 navbar-elements\">\r\n                <DropdownButton id=\"dropdown-basic-button\" title=\"Categories\">\r\n                  <Dropdown.Item href=\"/category-1\">{categories[2].name}</Dropdown.Item>\r\n                  <Dropdown.Item href=\"/category-2\">{categories[4].name}</Dropdown.Item>\r\n                  <Dropdown.Item href=\"/category-3\">{categories[7].name}</Dropdown.Item>\r\n                </DropdownButton>\r\n              </div>\r\n              <input id=\"search-bar\" placeholder=\"search\" className=\"col-sm-2\"></input>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Switch>\r\n          <Route path={\"/termsOfService\"} component={() => <Pages pages={pages[3]} />} />\r\n          <Route path={\"/codeOfConduct\"} component={() => <Pages pages={pages[5]} />} />\r\n          <Route exact path={\"/\"} component={() => <Home posts={posts} />} />\r\n          <Route path={\"/category-1\"} render={() => <h1>Contact Us</h1>} />\r\n          <Route path=\"/posts=:postsId\" component={PostPage} />\r\n        </Switch>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  error: getPostsError(state),\r\n  posts: getPosts(state),\r\n  pages: getPages(state),\r\n  categories: getCategories(state),\r\n  pending: getPostsPending(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n  fetchPosts: fetchPostsAction,\r\n  fetchPages: fetchPagesAction,\r\n  fetchCategories: fetchCategoriesAction\r\n}, dispatch)\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Body);\r\n\r\n","import React from 'react';\nimport '../App.css';\nimport Header from './header';\n\nfunction App() {\n  return (\n    <Header />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { postsReducer } from './reducer/postsReducer.js';\nimport { initialState } from './reducer/postsReducer.js';\n\nconst middlewares = [thunk];\n\nlet store = createStore(postsReducer, initialState, applyMiddleware(...middlewares));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}